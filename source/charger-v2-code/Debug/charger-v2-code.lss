
charger-v2-code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803f00  00803f00  00000382  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000032e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000382  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000233f  00000000  00000000  00000488  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001866  00000000  00000000  000027c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006a3  00000000  00000000  0000402d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000012c  00000000  00000000  000046d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001164  00000000  00000000  000047fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000042c  00000000  00000000  00005960  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00005d8c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	27 c0       	rjmp	.+78     	; 0x50 <__ctors_end>
   2:	2e c0       	rjmp	.+92     	; 0x60 <__bad_interrupt>
   4:	2d c0       	rjmp	.+90     	; 0x60 <__bad_interrupt>
   6:	2c c0       	rjmp	.+88     	; 0x60 <__bad_interrupt>
   8:	2b c0       	rjmp	.+86     	; 0x60 <__bad_interrupt>
   a:	2a c0       	rjmp	.+84     	; 0x60 <__bad_interrupt>
   c:	29 c0       	rjmp	.+82     	; 0x60 <__bad_interrupt>
   e:	28 c0       	rjmp	.+80     	; 0x60 <__bad_interrupt>
  10:	27 c0       	rjmp	.+78     	; 0x60 <__bad_interrupt>
  12:	26 c0       	rjmp	.+76     	; 0x60 <__bad_interrupt>
  14:	25 c0       	rjmp	.+74     	; 0x60 <__bad_interrupt>
  16:	24 c0       	rjmp	.+72     	; 0x60 <__bad_interrupt>
  18:	23 c0       	rjmp	.+70     	; 0x60 <__bad_interrupt>
  1a:	22 c0       	rjmp	.+68     	; 0x60 <__bad_interrupt>
  1c:	21 c0       	rjmp	.+66     	; 0x60 <__bad_interrupt>
  1e:	20 c0       	rjmp	.+64     	; 0x60 <__bad_interrupt>
  20:	1f c0       	rjmp	.+62     	; 0x60 <__bad_interrupt>
  22:	1e c0       	rjmp	.+60     	; 0x60 <__bad_interrupt>
  24:	1d c0       	rjmp	.+58     	; 0x60 <__bad_interrupt>
  26:	1c c0       	rjmp	.+56     	; 0x60 <__bad_interrupt>
  28:	1b c0       	rjmp	.+54     	; 0x60 <__bad_interrupt>
  2a:	1a c0       	rjmp	.+52     	; 0x60 <__bad_interrupt>
  2c:	19 c0       	rjmp	.+50     	; 0x60 <__bad_interrupt>
  2e:	18 c0       	rjmp	.+48     	; 0x60 <__bad_interrupt>
  30:	17 c0       	rjmp	.+46     	; 0x60 <__bad_interrupt>
  32:	16 c0       	rjmp	.+44     	; 0x60 <__bad_interrupt>
  34:	34 c1       	rjmp	.+616    	; 0x29e <main+0x50>
  36:	2b c1       	rjmp	.+598    	; 0x28e <main+0x40>
  38:	27 c1       	rjmp	.+590    	; 0x288 <main+0x3a>
  3a:	43 c1       	rjmp	.+646    	; 0x2c2 <main+0x74>
  3c:	17 c1       	rjmp	.+558    	; 0x26c <main+0x1e>
  3e:	2b c1       	rjmp	.+598    	; 0x296 <main+0x48>
  40:	40 c1       	rjmp	.+640    	; 0x2c2 <main+0x74>
  42:	3f c1       	rjmp	.+638    	; 0x2c2 <main+0x74>
  44:	3e c1       	rjmp	.+636    	; 0x2c2 <main+0x74>
  46:	3d c1       	rjmp	.+634    	; 0x2c2 <main+0x74>
  48:	3c c1       	rjmp	.+632    	; 0x2c2 <main+0x74>
  4a:	32 c1       	rjmp	.+612    	; 0x2b0 <main+0x62>
  4c:	3a c1       	rjmp	.+628    	; 0x2c2 <main+0x74>
  4e:	00 c1       	rjmp	.+512    	; 0x250 <main+0x2>

00000050 <__ctors_end>:
  50:	11 24       	eor	r1, r1
  52:	1f be       	out	0x3f, r1	; 63
  54:	cf ef       	ldi	r28, 0xFF	; 255
  56:	cd bf       	out	0x3d, r28	; 61
  58:	df e3       	ldi	r29, 0x3F	; 63
  5a:	de bf       	out	0x3e, r29	; 62
  5c:	f8 d0       	rcall	.+496    	; 0x24e <main>
  5e:	65 c1       	rjmp	.+714    	; 0x32a <_exit>

00000060 <__bad_interrupt>:
  60:	cf cf       	rjmp	.-98     	; 0x0 <__vectors>

00000062 <init>:
}

uint8_t ButtOn()
{
	return (~PORTA.IN & PIN4_bm);
}
  62:	cf 93       	push	r28
  64:	df 93       	push	r29
  66:	a0 ea       	ldi	r26, 0xA0	; 160
  68:	b0 e0       	ldi	r27, 0x00	; 0
  6a:	8c 91       	ld	r24, X
  6c:	82 60       	ori	r24, 0x02	; 2
  6e:	8c 93       	st	X, r24
  70:	11 96       	adiw	r26, 0x01	; 1
  72:	8c 91       	ld	r24, X
  74:	11 97       	sbiw	r26, 0x01	; 1
  76:	81 60       	ori	r24, 0x01	; 1
  78:	11 96       	adiw	r26, 0x01	; 1
  7a:	8c 93       	st	X, r24
  7c:	11 97       	sbiw	r26, 0x01	; 1
  7e:	8c e1       	ldi	r24, 0x1C	; 28
  80:	8a 95       	dec	r24
  82:	f1 f7       	brne	.-4      	; 0x80 <init+0x1e>
  84:	e0 e0       	ldi	r30, 0x00	; 0
  86:	f4 e0       	ldi	r31, 0x04	; 4
  88:	86 89       	ldd	r24, Z+22	; 0x16
  8a:	88 7f       	andi	r24, 0xF8	; 248
  8c:	86 8b       	std	Z+22, r24	; 0x16
  8e:	86 89       	ldd	r24, Z+22	; 0x16
  90:	84 60       	ori	r24, 0x04	; 4
  92:	86 8b       	std	Z+22, r24	; 0x16
  94:	86 89       	ldd	r24, Z+22	; 0x16
  96:	87 7f       	andi	r24, 0xF7	; 247
  98:	86 8b       	std	Z+22, r24	; 0x16
  9a:	c0 e8       	ldi	r28, 0x80	; 128
  9c:	d6 e0       	ldi	r29, 0x06	; 6
  9e:	19 82       	std	Y+1, r1	; 0x01
  a0:	88 81       	ld	r24, Y
  a2:	81 60       	ori	r24, 0x01	; 1
  a4:	88 83       	st	Y, r24
  a6:	88 81       	ld	r24, Y
  a8:	80 64       	ori	r24, 0x40	; 64
  aa:	88 83       	st	Y, r24
  ac:	80 81       	ld	r24, Z
  ae:	8c 60       	ori	r24, 0x0C	; 12
  b0:	80 83       	st	Z, r24
  b2:	84 81       	ldd	r24, Z+4	; 0x04
  b4:	8c 60       	ori	r24, 0x0C	; 12
  b6:	84 83       	std	Z+4, r24	; 0x04
  b8:	80 e1       	ldi	r24, 0x10	; 16
  ba:	82 83       	std	Z+2, r24	; 0x02
  bc:	81 89       	ldd	r24, Z+17	; 0x11
  be:	88 7f       	andi	r24, 0xF8	; 248
  c0:	84 60       	ori	r24, 0x04	; 4
  c2:	81 8b       	std	Z+17, r24	; 0x11
  c4:	85 89       	ldd	r24, Z+21	; 0x15
  c6:	88 7f       	andi	r24, 0xF8	; 248
  c8:	84 60       	ori	r24, 0x04	; 4
  ca:	85 8b       	std	Z+21, r24	; 0x15
  cc:	87 89       	ldd	r24, Z+23	; 0x17
  ce:	88 7f       	andi	r24, 0xF8	; 248
  d0:	84 60       	ori	r24, 0x04	; 4
  d2:	87 8b       	std	Z+23, r24	; 0x17
  d4:	e0 e0       	ldi	r30, 0x00	; 0
  d6:	f6 e0       	ldi	r31, 0x06	; 6
  d8:	80 81       	ld	r24, Z
  da:	80 83       	st	Z, r24
  dc:	84 e0       	ldi	r24, 0x04	; 4
  de:	81 83       	std	Z+1, r24	; 0x01
  e0:	82 81       	ldd	r24, Z+2	; 0x02
  e2:	8f 72       	andi	r24, 0x2F	; 47
  e4:	80 61       	ori	r24, 0x10	; 16
  e6:	82 83       	std	Z+2, r24	; 0x02
  e8:	8c 91       	ld	r24, X
  ea:	80 63       	ori	r24, 0x30	; 48
  ec:	8c 93       	st	X, r24
  ee:	11 96       	adiw	r26, 0x01	; 1
  f0:	8c 91       	ld	r24, X
  f2:	11 97       	sbiw	r26, 0x01	; 1
  f4:	82 60       	ori	r24, 0x02	; 2
  f6:	11 96       	adiw	r26, 0x01	; 1
  f8:	8c 93       	st	X, r24
  fa:	82 81       	ldd	r24, Z+2	; 0x02
  fc:	86 60       	ori	r24, 0x06	; 6
  fe:	82 83       	std	Z+2, r24	; 0x02
 100:	82 81       	ldd	r24, Z+2	; 0x02
 102:	82 83       	std	Z+2, r24	; 0x02
 104:	86 81       	ldd	r24, Z+6	; 0x06
 106:	80 7e       	andi	r24, 0xE0	; 224
 108:	85 60       	ori	r24, 0x05	; 5
 10a:	86 83       	std	Z+6, r24	; 0x06
 10c:	80 81       	ld	r24, Z
 10e:	81 60       	ori	r24, 0x01	; 1
 110:	80 83       	st	Z, r24
 112:	e0 e2       	ldi	r30, 0x20	; 32
 114:	f4 e0       	ldi	r31, 0x04	; 4
 116:	80 81       	ld	r24, Z
 118:	87 7f       	andi	r24, 0xF7	; 247
 11a:	80 83       	st	Z, r24
 11c:	80 81       	ld	r24, Z
 11e:	84 60       	ori	r24, 0x04	; 4
 120:	80 83       	st	Z, r24
 122:	e0 e0       	ldi	r30, 0x00	; 0
 124:	f8 e0       	ldi	r31, 0x08	; 8
 126:	86 eb       	ldi	r24, 0xB6	; 182
 128:	92 e0       	ldi	r25, 0x02	; 2
 12a:	80 87       	std	Z+8, r24	; 0x08
 12c:	91 87       	std	Z+9, r25	; 0x09
 12e:	80 e4       	ldi	r24, 0x40	; 64
 130:	86 83       	std	Z+6, r24	; 0x06
 132:	86 81       	ldd	r24, Z+6	; 0x06
 134:	80 68       	ori	r24, 0x80	; 128
 136:	86 83       	std	Z+6, r24	; 0x06
 138:	df 91       	pop	r29
 13a:	cf 91       	pop	r28
 13c:	08 95       	ret

0000013e <LedR>:
 13e:	88 23       	and	r24, r24
 140:	31 f0       	breq	.+12     	; 0x14e <LedR+0x10>
 142:	e0 e0       	ldi	r30, 0x00	; 0
 144:	f4 e0       	ldi	r31, 0x04	; 4
 146:	84 81       	ldd	r24, Z+4	; 0x04
 148:	87 7f       	andi	r24, 0xF7	; 247
 14a:	84 83       	std	Z+4, r24	; 0x04
 14c:	08 95       	ret
 14e:	e0 e0       	ldi	r30, 0x00	; 0
 150:	f4 e0       	ldi	r31, 0x04	; 4
 152:	84 81       	ldd	r24, Z+4	; 0x04
 154:	88 60       	ori	r24, 0x08	; 8
 156:	84 83       	std	Z+4, r24	; 0x04
 158:	08 95       	ret

0000015a <LedG>:
 15a:	88 23       	and	r24, r24
 15c:	31 f0       	breq	.+12     	; 0x16a <LedG+0x10>
 15e:	e0 e0       	ldi	r30, 0x00	; 0
 160:	f4 e0       	ldi	r31, 0x04	; 4
 162:	84 81       	ldd	r24, Z+4	; 0x04
 164:	8b 7f       	andi	r24, 0xFB	; 251
 166:	84 83       	std	Z+4, r24	; 0x04
 168:	08 95       	ret
 16a:	e0 e0       	ldi	r30, 0x00	; 0
 16c:	f4 e0       	ldi	r31, 0x04	; 4
 16e:	84 81       	ldd	r24, Z+4	; 0x04
 170:	84 60       	ori	r24, 0x04	; 4
 172:	84 83       	std	Z+4, r24	; 0x04
 174:	08 95       	ret

00000176 <USART0_sendChar>:
 176:	e0 e0       	ldi	r30, 0x00	; 0
 178:	f8 e0       	ldi	r31, 0x08	; 8
 17a:	94 81       	ldd	r25, Z+4	; 0x04
 17c:	95 ff       	sbrs	r25, 5
 17e:	fd cf       	rjmp	.-6      	; 0x17a <USART0_sendChar+0x4>
 180:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
 184:	08 95       	ret

00000186 <USART0_readChar>:
 186:	e0 e0       	ldi	r30, 0x00	; 0
 188:	f8 e0       	ldi	r31, 0x08	; 8
 18a:	84 81       	ldd	r24, Z+4	; 0x04
 18c:	88 23       	and	r24, r24
 18e:	ec f7       	brge	.-6      	; 0x18a <USART0_readChar+0x4>
 190:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
 194:	08 95       	ret

00000196 <SendVoltageUart>:
 196:	1f 93       	push	r17
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
 19c:	cd b7       	in	r28, 0x3d	; 61
 19e:	de b7       	in	r29, 0x3e	; 62
 1a0:	27 97       	sbiw	r28, 0x07	; 7
 1a2:	cd bf       	out	0x3d, r28	; 61
 1a4:	de bf       	out	0x3e, r29	; 62
 1a6:	4a e0       	ldi	r20, 0x0A	; 10
 1a8:	be 01       	movw	r22, r28
 1aa:	6f 5f       	subi	r22, 0xFF	; 255
 1ac:	7f 4f       	sbci	r23, 0xFF	; 255
 1ae:	93 d0       	rcall	.+294    	; 0x2d6 <__utoa_ncheck>
 1b0:	89 81       	ldd	r24, Y+1	; 0x01
 1b2:	88 23       	and	r24, r24
 1b4:	61 f0       	breq	.+24     	; 0x1ce <SendVoltageUart+0x38>
 1b6:	10 e0       	ldi	r17, 0x00	; 0
 1b8:	de df       	rcall	.-68     	; 0x176 <USART0_sendChar>
 1ba:	1f 5f       	subi	r17, 0xFF	; 255
 1bc:	e1 e0       	ldi	r30, 0x01	; 1
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	ec 0f       	add	r30, r28
 1c2:	fd 1f       	adc	r31, r29
 1c4:	e1 0f       	add	r30, r17
 1c6:	f1 1d       	adc	r31, r1
 1c8:	80 81       	ld	r24, Z
 1ca:	81 11       	cpse	r24, r1
 1cc:	f5 cf       	rjmp	.-22     	; 0x1b8 <SendVoltageUart+0x22>
 1ce:	8a e0       	ldi	r24, 0x0A	; 10
 1d0:	d2 df       	rcall	.-92     	; 0x176 <USART0_sendChar>
 1d2:	27 96       	adiw	r28, 0x07	; 7
 1d4:	cd bf       	out	0x3d, r28	; 61
 1d6:	de bf       	out	0x3e, r29	; 62
 1d8:	df 91       	pop	r29
 1da:	cf 91       	pop	r28
 1dc:	1f 91       	pop	r17
 1de:	08 95       	ret

000001e0 <SetChargingCurrent>:
 1e0:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <__TEXT_REGION_LENGTH__+0x700681>
 1e4:	08 95       	ret

000001e6 <GetLow>:

uint16_t GetLow(uint8_t shift){
	uint16_t u;
	ADC0.MUXPOS = (ADC0.MUXPOS & 0xe0) | 0x01;
 1e6:	e0 e0       	ldi	r30, 0x00	; 0
 1e8:	f6 e0       	ldi	r31, 0x06	; 6
 1ea:	96 81       	ldd	r25, Z+6	; 0x06
 1ec:	90 7e       	andi	r25, 0xE0	; 224
 1ee:	91 60       	ori	r25, 0x01	; 1
 1f0:	96 83       	std	Z+6, r25	; 0x06
	ADC0.COMMAND = ADC_STCONV_bm;
 1f2:	91 e0       	ldi	r25, 0x01	; 1
 1f4:	90 87       	std	Z+8, r25	; 0x08
	while (!(ADC0.INTFLAGS & ADC_RESRDY_bm)) {
 1f6:	93 85       	ldd	r25, Z+11	; 0x0b
 1f8:	90 ff       	sbrs	r25, 0
 1fa:	fd cf       	rjmp	.-6      	; 0x1f6 <GetLow+0x10>
		; //waiting for conversion to be finished
	}
	u = ADC0.RES >> shift; //average
 1fc:	e0 e0       	ldi	r30, 0x00	; 0
 1fe:	f6 e0       	ldi	r31, 0x06	; 6
 200:	20 89       	ldd	r18, Z+16	; 0x10
 202:	31 89       	ldd	r19, Z+17	; 0x11
	ADC0.COMMAND &= ~ADC_STCONV_bm;
 204:	90 85       	ldd	r25, Z+8	; 0x08
 206:	9e 7f       	andi	r25, 0xFE	; 254
 208:	90 87       	std	Z+8, r25	; 0x08
	return u;
}
 20a:	a9 01       	movw	r20, r18
 20c:	02 c0       	rjmp	.+4      	; 0x212 <GetLow+0x2c>
 20e:	56 95       	lsr	r21
 210:	47 95       	ror	r20
 212:	8a 95       	dec	r24
 214:	e2 f7       	brpl	.-8      	; 0x20e <GetLow+0x28>
 216:	ca 01       	movw	r24, r20
 218:	08 95       	ret

0000021a <GetHigh>:

uint16_t GetHigh(uint8_t shift){
	uint16_t u;
	ADC0.MUXPOS = (ADC0.MUXPOS & 0xe0) | 0x05;
 21a:	e0 e0       	ldi	r30, 0x00	; 0
 21c:	f6 e0       	ldi	r31, 0x06	; 6
 21e:	96 81       	ldd	r25, Z+6	; 0x06
 220:	90 7e       	andi	r25, 0xE0	; 224
 222:	95 60       	ori	r25, 0x05	; 5
 224:	96 83       	std	Z+6, r25	; 0x06
	ADC0.COMMAND = ADC_STCONV_bm;
 226:	91 e0       	ldi	r25, 0x01	; 1
 228:	90 87       	std	Z+8, r25	; 0x08
	while (!(ADC0.INTFLAGS & ADC_RESRDY_bm)) {
 22a:	93 85       	ldd	r25, Z+11	; 0x0b
 22c:	90 ff       	sbrs	r25, 0
 22e:	fd cf       	rjmp	.-6      	; 0x22a <GetHigh+0x10>
		; //waiting for conversion to be finished
	}
	u = ADC0.RES >> shift; //average
 230:	e0 e0       	ldi	r30, 0x00	; 0
 232:	f6 e0       	ldi	r31, 0x06	; 6
 234:	20 89       	ldd	r18, Z+16	; 0x10
 236:	31 89       	ldd	r19, Z+17	; 0x11
	ADC0.COMMAND &= ~ADC_STCONV_bm;
 238:	90 85       	ldd	r25, Z+8	; 0x08
 23a:	9e 7f       	andi	r25, 0xFE	; 254
 23c:	90 87       	std	Z+8, r25	; 0x08
	return  u;
 23e:	a9 01       	movw	r20, r18
 240:	02 c0       	rjmp	.+4      	; 0x246 <GetHigh+0x2c>
 242:	56 95       	lsr	r21
 244:	47 95       	ror	r20
 246:	8a 95       	dec	r24
 248:	e2 f7       	brpl	.-8      	; 0x242 <GetHigh+0x28>
 24a:	ca 01       	movw	r24, r20
 24c:	08 95       	ret

0000024e <main>:
#include "hw.h"


int main(void)
{
	init();
 24e:	09 df       	rcall	.-494    	; 0x62 <init>
	uint8_t Is = 0;
	uint16_t u;	

	while(1)
	{
		char c  = USART0_readChar();
 250:	9a df       	rcall	.-204    	; 0x186 <USART0_readChar>
 252:	c8 2f       	mov	r28, r24
		
		if( c > 0 )
 254:	88 23       	and	r24, r24
 256:	e1 f1       	breq	.+120    	; 0x2d0 <main+0x82>
		{
			switch(c)
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	fc 01       	movw	r30, r24
 25c:	e7 54       	subi	r30, 0x47	; 71
 25e:	f1 09       	sbc	r31, r1
 260:	ee 30       	cpi	r30, 0x0E	; 14
 262:	f1 05       	cpc	r31, r1
 264:	70 f5       	brcc	.+92     	; 0x2c2 <main+0x74>
 266:	e6 5e       	subi	r30, 0xE6	; 230
 268:	ff 4f       	sbci	r31, 0xFF	; 255
 26a:	09 94       	ijmp
			{
				case 'K':
					Is = USART0_readChar();
 26c:	8c df       	rcall	.-232    	; 0x186 <USART0_readChar>
 26e:	18 2f       	mov	r17, r24
					u = GetHigh(0) - GetLow(0);
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	d3 df       	rcall	.-90     	; 0x21a <GetHigh>
 274:	ec 01       	movw	r28, r24
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	b6 df       	rcall	.-148    	; 0x1e6 <GetLow>
 27a:	c8 1b       	sub	r28, r24
 27c:	d9 0b       	sbc	r29, r25
					SetChargingCurrent(Is);
 27e:	81 2f       	mov	r24, r17
 280:	af df       	rcall	.-162    	; 0x1e0 <SetChargingCurrent>
					SendVoltageUart(u);
 282:	ce 01       	movw	r24, r28
 284:	88 df       	rcall	.-240    	; 0x196 <SendVoltageUart>
					break;
 286:	e4 cf       	rjmp	.-56     	; 0x250 <main+0x2>
				case 'I':
					SetChargingCurrent(USART0_readChar());
 288:	7e df       	rcall	.-260    	; 0x186 <USART0_readChar>
 28a:	aa df       	rcall	.-172    	; 0x1e0 <SetChargingCurrent>
					break;
 28c:	e1 cf       	rjmp	.-62     	; 0x250 <main+0x2>
				case 'H':
					SendVoltageUart(GetHigh(0));
 28e:	80 e0       	ldi	r24, 0x00	; 0
 290:	c4 df       	rcall	.-120    	; 0x21a <GetHigh>
 292:	81 df       	rcall	.-254    	; 0x196 <SendVoltageUart>
					break;
 294:	dd cf       	rjmp	.-70     	; 0x250 <main+0x2>
				case 'L':
					SendVoltageUart(GetLow(0));
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	a6 df       	rcall	.-180    	; 0x1e6 <GetLow>
 29a:	7d df       	rcall	.-262    	; 0x196 <SendVoltageUart>
					break;
 29c:	d9 cf       	rjmp	.-78     	; 0x250 <main+0x2>
				case 'T':
					break;
				case 'G':
					if(USART0_readChar() > 0)
 29e:	73 df       	rcall	.-282    	; 0x186 <USART0_readChar>
 2a0:	88 23       	and	r24, r24
 2a2:	19 f0       	breq	.+6      	; 0x2aa <main+0x5c>
						LedG(1);
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	59 df       	rcall	.-334    	; 0x15a <LedG>
 2a8:	d3 cf       	rjmp	.-90     	; 0x250 <main+0x2>
					else
						LedG(0);
 2aa:	80 e0       	ldi	r24, 0x00	; 0
 2ac:	56 df       	rcall	.-340    	; 0x15a <LedG>
 2ae:	d0 cf       	rjmp	.-96     	; 0x250 <main+0x2>
					break;
				case 'R':
					if(USART0_readChar() > 0)
 2b0:	6a df       	rcall	.-300    	; 0x186 <USART0_readChar>
 2b2:	88 23       	and	r24, r24
 2b4:	19 f0       	breq	.+6      	; 0x2bc <main+0x6e>
						LedR(1);
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	42 df       	rcall	.-380    	; 0x13e <LedR>
 2ba:	ca cf       	rjmp	.-108    	; 0x250 <main+0x2>
					else
						LedR(0);
 2bc:	80 e0       	ldi	r24, 0x00	; 0
 2be:	3f df       	rcall	.-386    	; 0x13e <LedR>
 2c0:	c7 cf       	rjmp	.-114    	; 0x250 <main+0x2>
					break;
				default:
					USART0_sendChar('E');
 2c2:	85 e4       	ldi	r24, 0x45	; 69
 2c4:	58 df       	rcall	.-336    	; 0x176 <USART0_sendChar>
					USART0_sendChar(c);
 2c6:	8c 2f       	mov	r24, r28
 2c8:	56 df       	rcall	.-340    	; 0x176 <USART0_sendChar>
					SetChargingCurrent(0);
 2ca:	80 e0       	ldi	r24, 0x00	; 0
 2cc:	89 df       	rcall	.-238    	; 0x1e0 <SetChargingCurrent>
 2ce:	c0 cf       	rjmp	.-128    	; 0x250 <main+0x2>
			}
		}
		else
		{
			SetChargingCurrent(0);
 2d0:	80 e0       	ldi	r24, 0x00	; 0
 2d2:	86 df       	rcall	.-244    	; 0x1e0 <SetChargingCurrent>
 2d4:	bd cf       	rjmp	.-134    	; 0x250 <main+0x2>

000002d6 <__utoa_ncheck>:
 2d6:	bb 27       	eor	r27, r27

000002d8 <__utoa_common>:
 2d8:	fb 01       	movw	r30, r22
 2da:	55 27       	eor	r21, r21
 2dc:	aa 27       	eor	r26, r26
 2de:	88 0f       	add	r24, r24
 2e0:	99 1f       	adc	r25, r25
 2e2:	aa 1f       	adc	r26, r26
 2e4:	a4 17       	cp	r26, r20
 2e6:	10 f0       	brcs	.+4      	; 0x2ec <__utoa_common+0x14>
 2e8:	a4 1b       	sub	r26, r20
 2ea:	83 95       	inc	r24
 2ec:	50 51       	subi	r21, 0x10	; 16
 2ee:	b9 f7       	brne	.-18     	; 0x2de <__utoa_common+0x6>
 2f0:	a0 5d       	subi	r26, 0xD0	; 208
 2f2:	aa 33       	cpi	r26, 0x3A	; 58
 2f4:	08 f0       	brcs	.+2      	; 0x2f8 <__utoa_common+0x20>
 2f6:	a9 5d       	subi	r26, 0xD9	; 217
 2f8:	a1 93       	st	Z+, r26
 2fa:	00 97       	sbiw	r24, 0x00	; 0
 2fc:	79 f7       	brne	.-34     	; 0x2dc <__utoa_common+0x4>
 2fe:	b1 11       	cpse	r27, r1
 300:	b1 93       	st	Z+, r27
 302:	11 92       	st	Z+, r1
 304:	cb 01       	movw	r24, r22
 306:	0c 94 85 01 	jmp	0x30a	; 0x30a <strrev>

0000030a <strrev>:
 30a:	dc 01       	movw	r26, r24
 30c:	fc 01       	movw	r30, r24
 30e:	67 2f       	mov	r22, r23
 310:	71 91       	ld	r23, Z+
 312:	77 23       	and	r23, r23
 314:	e1 f7       	brne	.-8      	; 0x30e <strrev+0x4>
 316:	32 97       	sbiw	r30, 0x02	; 2
 318:	04 c0       	rjmp	.+8      	; 0x322 <strrev+0x18>
 31a:	7c 91       	ld	r23, X
 31c:	6d 93       	st	X+, r22
 31e:	70 83       	st	Z, r23
 320:	62 91       	ld	r22, -Z
 322:	ae 17       	cp	r26, r30
 324:	bf 07       	cpc	r27, r31
 326:	c8 f3       	brcs	.-14     	; 0x31a <strrev+0x10>
 328:	08 95       	ret

0000032a <_exit>:
 32a:	f8 94       	cli

0000032c <__stop_program>:
 32c:	ff cf       	rjmp	.-2      	; 0x32c <__stop_program>
